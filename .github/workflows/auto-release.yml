name: Auto Release on Deploy

on:
  workflow_run:
    workflows: ["Deploy to Production", "Bulletproof Production Deploy"]
    types: [completed]
    branches: [main]

jobs:
  create-release:
    name: Create Release Tag
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for version calculation
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag
        id: get_tag
        run: |
          # Get the latest tag, default to 1.4.0 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.4.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "üìã Latest tag: $LATEST_TAG"

      - name: Calculate next version
        id: next_version
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          
          # Remove 'v' prefix if present
          LATEST_TAG=${LATEST_TAG#v}
          
          # Split version into parts
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "üìà Next version: v$NEW_VERSION"

      - name: Check if tag already exists
        id: check_tag
        run: |
          NEW_TAG="${{ steps.next_version.outputs.new_tag }}"
          if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Tag $NEW_TAG already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Tag $NEW_TAG is available"
          fi

      - name: Create and push tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          NEW_TAG="${{ steps.next_version.outputs.new_tag }}"
          NEW_VERSION="${{ steps.next_version.outputs.new_version }}"
          
          # Create tag with message
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Create annotated tag
          git tag -a "$NEW_TAG" -m "Release $NEW_VERSION - Production Deployment
          
          üöÄ **Production Deployment**
          
          **Version:** $NEW_VERSION
          **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Commit:** ${{ github.event.workflow_run.head_sha }}
          **Workflow:** ${{ github.event.workflow_run.name }}
          
          **Changes:**
          - Production deployment completed successfully
          - All tests passed
          - Security checks passed
          - Build successful
          
          **Deployment Details:**
          - Environment: Production
          - Branch: main
          - Triggered by: ${{ github.event.workflow_run.triggering_actor.login }}
          
          ---
          *This release was automatically created by GitHub Actions*"
          
          # Push tag to repository
          git push origin "$NEW_TAG"
          
          echo "‚úÖ Created and pushed tag: $NEW_TAG"

      - name: Create GitHub Release
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.next_version.outputs.new_tag }}
          release_name: "Release ${{ steps.next_version.outputs.new_version }} - Production Deployment"
          body: |
            üöÄ **Production Deployment Successful**
            
            **Version:** ${{ steps.next_version.outputs.new_version }}
            **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            **Commit:** ${{ github.event.workflow_run.head_sha }}
            
            ## üìä Deployment Summary
            
            ‚úÖ **All Tests Passed**
            - Unit tests
            - Security tests  
            - Integration tests
            
            ‚úÖ **Quality Checks Passed**
            - Linting
            - Type checking
            - Security audit
            
            ‚úÖ **Build Successful**
            - Application compiled successfully
            - All dependencies resolved
            
            ## üîó Links
            
            - **Commit:** [${{ github.event.workflow_run.head_sha }}](https://github.com/${{ github.repository }}/commit/${{ github.event.workflow_run.head_sha }})
            - **Workflow Run:** [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }})
            
            ## üìù Notes
            
            This release was automatically created when the production deployment completed successfully.
            
            ---
            *Automatically generated by GitHub Actions*
          draft: false
          prerelease: false

      - name: Update package.json version
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          NEW_VERSION="${{ steps.next_version.outputs.new_version }}"
          
          # Update package.json version
          npm version "$NEW_VERSION" --no-git-tag-version
          
          # Commit the version update
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git push origin main
          
          echo "‚úÖ Updated package.json to version $NEW_VERSION"

      - name: Notify success
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          NEW_TAG="${{ steps.next_version.outputs.new_tag }}"
          NEW_VERSION="${{ steps.next_version.outputs.new_version }}"
          
          echo "üéâ RELEASE CREATED SUCCESSFULLY!"
          echo "üè∑Ô∏è  Tag: $NEW_TAG"
          echo "üì¶ Version: $NEW_VERSION"
          echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/$NEW_TAG"

      - name: Notify if tag exists
        if: steps.check_tag.outputs.exists == 'true'
        run: |
          echo "‚ö†Ô∏è SKIPPING RELEASE CREATION"
          echo "üìã Tag ${{ steps.next_version.outputs.new_tag }} already exists"
          echo "üîÑ This usually means multiple deployments happened quickly"
