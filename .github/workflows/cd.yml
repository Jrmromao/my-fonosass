name: CD - Continuous Deployment

on:
  push:
    branches: [main]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run TypeScript check
        run: yarn tsc --noEmit

      - name: Run tests
        run: yarn test
        env:
          NODE_ENV: test

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build application
        run: yarn build
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          NEXT_PUBLIC_CLERK_SIGN_IN_URL: ${{ secrets.NEXT_PUBLIC_CLERK_SIGN_IN_URL }}
          NEXT_PUBLIC_CLERK_SIGN_UP_URL: ${{ secrets.NEXT_PUBLIC_CLERK_SIGN_UP_URL }}
          NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL: ${{ secrets.NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL }}
          NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL: ${{ secrets.NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

  create-release:
    name: Create Release Tag
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Get the latest tag, defaulting to v1.5.0 if none exists
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.4.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Generate new version
        id: new_version
        run: |
          # Extract version number and increment patch
          VERSION=${GITHUB_REF_NAME#v}
          if [[ $VERSION =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
          else
            # Fallback to v1.5.0 if version format is unexpected
            NEW_VERSION="v1.5.0"
          fi
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ steps.new_version.outputs.new_version }} -m "Release ${{ steps.new_version.outputs.new_version }}"
          git push origin ${{ steps.new_version.outputs.new_version }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.new_version.outputs.new_version }}
          release_name: Release ${{ steps.new_version.outputs.new_version }}
          body: |
            üöÄ **Automatic Release** ${{ steps.new_version.outputs.new_version }}
            
            This release was automatically created after successful deployment to production.
            
            **Changes:**
            - Production deployment completed successfully
            - All tests passed
            - Build completed without errors
            
            **Deployment Details:**
            - Branch: ${{ github.ref_name }}
            - Commit: ${{ github.sha }}
            - Workflow: ${{ github.workflow }}
          draft: false
          prerelease: false

  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy, create-release]
    if: always()
    
    steps:
      - name: Notify Success
        if: needs.deploy.result == 'success' && needs.create-release.result == 'success'
        run: |
          echo "‚úÖ Production deployment completed successfully!"
          echo "üè∑Ô∏è Release ${{ steps.new_version.outputs.new_version }} created"
          echo "üîó Check your Vercel dashboard for the deployment URL"

      - name: Notify Failure
        if: needs.deploy.result == 'failure' || needs.create-release.result == 'failure'
        run: |
          echo "‚ùå Production deployment failed!"
          echo "Check the logs for more details"
