name: Manual Production Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      skip_tests:
        description: 'Skip tests (not recommended)'
        required: false
        default: false
        type: boolean

jobs:
  pre-deploy-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run linting
        run: yarn lint

      - name: Run type checking
        run: yarn tsc --noEmit

      - name: Run unit tests
        if: ${{ !inputs.skip_tests }}
        run: yarn test --coverage --watchAll=false

      - name: Run security tests
        if: ${{ !inputs.skip_tests }}
        run: yarn test:security --coverage --watchAll=false

      - name: Run integration tests
        if: ${{ !inputs.skip_tests }}
        run: yarn test:integration --coverage --watchAll=false

      - name: Check for TODO/FIXME comments
        run: |
          echo "üîç Checking for TODO/FIXME comments..."
          if grep -r "TODO\|FIXME" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" .; then
            echo "‚ö†Ô∏è  Found TODO/FIXME comments. Consider addressing them before production deployment."
          else
            echo "‚úÖ No TODO/FIXME comments found."
          fi

      - name: Check for console.log statements
        run: |
          echo "üîç Checking for console.log statements..."
          if grep -r "console\.log" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" .; then
            echo "‚ö†Ô∏è  Found console.log statements. Consider removing them before production deployment."
          else
            echo "‚úÖ No console.log statements found."
          fi

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build application
        run: yarn build
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          NEXT_PUBLIC_CLERK_SIGN_IN_URL: ${{ secrets.NEXT_PUBLIC_CLERK_SIGN_IN_URL }}
          NEXT_PUBLIC_CLERK_SIGN_UP_URL: ${{ secrets.NEXT_PUBLIC_CLERK_SIGN_UP_URL }}
          NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL: ${{ secrets.NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL }}
          NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL: ${{ secrets.NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}

  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: ${{ inputs.environment == 'production' && '--prod' || '--prebuilt' }}
          working-directory: ./

      - name: Verify deployment
        run: |
          echo "‚úÖ Deployment to ${{ inputs.environment }} completed successfully!"
          echo "üîó Check your Vercel dashboard for the deployment URL"

  post-deploy:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: deploy
    if: inputs.environment == 'production'
    
    steps:
      - name: Health check
        run: |
          echo "üè• Running health checks..."
          # Add your production URL health check here
          # curl -f https://your-production-url.com/api/health || exit 1
          echo "‚úÖ Health checks passed"

      - name: Notify deployment success
        run: |
          echo "üéâ Production deployment successful!"
          echo "üìä All tests passed and application is live"
