name: Daily Release

on:
  schedule:
    # Run every day at 9 AM UTC (adjust timezone as needed)
    - cron: '0 9 * * *'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: 'Custom version (overrides release_type)'
        required: false
        type: string

jobs:
  create-daily-release:
    name: Create Daily Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag
        id: get_tag
        run: |
          # Get the latest tag, default to 1.4.0 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.4.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "📋 Latest tag: $LATEST_TAG"

      - name: Calculate next version
        id: next_version
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          
          # Remove 'v' prefix if present
          LATEST_TAG=${LATEST_TAG#v}
          
          # Check if custom version is provided
          if [[ -n "${{ github.event.inputs.custom_version }}" ]]; then
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
            echo "🎯 Using custom version: $NEW_VERSION"
          else
            # Split version into parts
            IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"
            
            # Determine release type
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
            if [[ "${{ github.event_name }}" == "schedule" ]]; then
              RELEASE_TYPE="patch"  # Daily releases are patch versions
            fi
            
            case "$RELEASE_TYPE" in
              "major")
                NEW_MAJOR=$((MAJOR + 1))
                NEW_VERSION="$NEW_MAJOR.0.0"
                ;;
              "minor")
                NEW_MINOR=$((MINOR + 1))
                NEW_VERSION="$MAJOR.$NEW_MINOR.0"
                ;;
              "patch")
                NEW_PATCH=$((PATCH + 1))
                NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
                ;;
            esac
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "📈 Next version: v$NEW_VERSION"

      - name: Check if tag already exists
        id: check_tag
        run: |
          NEW_TAG="${{ steps.next_version.outputs.new_tag }}"
          if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "⚠️ Tag $NEW_TAG already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "✅ Tag $NEW_TAG is available"
          fi

      - name: Get commit messages since last tag
        if: steps.check_tag.outputs.exists == 'false'
        id: get_changes
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          NEW_TAG="${{ steps.next_version.outputs.new_tag }}"
          
          # Get commits since last tag
          COMMITS=$(git log --pretty=format:"- %s (%h)" "$LATEST_TAG..HEAD" 2>/dev/null || git log --pretty=format:"- %s (%h)" -10)
          
          if [[ -z "$COMMITS" ]]; then
            COMMITS="- No new commits since last release"
          fi
          
          echo "changes<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create and push tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          NEW_TAG="${{ steps.next_version.outputs.new_tag }}"
          NEW_VERSION="${{ steps.next_version.outputs.new_version }}"
          
          # Create tag with message
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Create annotated tag
          git tag -a "$NEW_TAG" -m "Release $NEW_VERSION - ${{ github.event_name == 'schedule' && 'Daily Release' || 'Manual Release' }}
          
          🚀 **${{ github.event_name == 'schedule' && 'Daily Release' || 'Manual Release' }}**
          
          **Version:** $NEW_VERSION
          **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Commit:** ${{ github.sha }}
          **Trigger:** ${{ github.event_name }}
          
          **Changes since last release:**
          ${{ steps.get_changes.outputs.changes }}
          
          ---
          *This release was automatically created by GitHub Actions*"
          
          # Push tag to repository
          git push origin "$NEW_TAG"
          
          echo "✅ Created and pushed tag: $NEW_TAG"

      - name: Create GitHub Release
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.next_version.outputs.new_tag }}
          release_name: "Release ${{ steps.next_version.outputs.new_version }} - ${{ github.event_name == 'schedule' && 'Daily Release' || 'Manual Release' }}"
          body: |
            🚀 **${{ github.event_name == 'schedule' && 'Daily Release' || 'Manual Release' }}**
            
            **Version:** ${{ steps.next_version.outputs.new_version }}
            **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            **Commit:** ${{ github.sha }}
            **Trigger:** ${{ github.event_name }}
            
            ## 📝 Changes Since Last Release
            
            ${{ steps.get_changes.outputs.changes }}
            
            ## 📊 Release Information
            
            - **Release Type:** ${{ github.event.inputs.release_type || 'patch' }}
            - **Previous Version:** ${{ steps.get_tag.outputs.latest_tag }}
            - **New Version:** ${{ steps.next_version.outputs.new_tag }}
            
            ## 🔗 Links
            
            - **Commit:** [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            - **Compare:** [${{ steps.get_tag.outputs.latest_tag }}...${{ steps.next_version.outputs.new_tag }}](https://github.com/${{ github.repository }}/compare/${{ steps.get_tag.outputs.latest_tag }}...${{ steps.next_version.outputs.new_tag }})
            
            ## 📝 Notes
            
            ${{ github.event_name == 'schedule' && 'This is an automated daily release created by GitHub Actions.' || 'This is a manual release created by GitHub Actions.' }}
            
            ---
            *Automatically generated by GitHub Actions*
          draft: false
          prerelease: false

      - name: Update package.json version
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          NEW_VERSION="${{ steps.next_version.outputs.new_version }}"
          
          # Update package.json version
          npm version "$NEW_VERSION" --no-git-tag-version
          
          # Commit the version update
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git push origin main
          
          echo "✅ Updated package.json to version $NEW_VERSION"

      - name: Notify success
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          NEW_TAG="${{ steps.next_version.outputs.new_tag }}"
          NEW_VERSION="${{ steps.next_version.outputs.new_version }}"
          
          echo "🎉 DAILY RELEASE CREATED SUCCESSFULLY!"
          echo "🏷️  Tag: $NEW_TAG"
          echo "📦 Version: $NEW_VERSION"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/$NEW_TAG"

      - name: Notify if tag exists
        if: steps.check_tag.outputs.exists == 'true'
        run: |
          echo "⚠️ SKIPPING RELEASE CREATION"
          echo "📋 Tag ${{ steps.next_version.outputs.new_tag }} already exists"
          echo "🔄 This usually means the release was already created today"
