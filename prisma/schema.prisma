generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  clerkUserId       String             @unique
  fullName          String
  role              UserRole           @default(USER)
  createdActivities Activity[]
  subscriptions     Subscription?
  consentRecords    ConsentRecord[]
  downloadHistory   DownloadHistory[]
  downloads         Download[]
  resourceDownloads ResourceDownload[]
  resourceRatings   ResourceRating[]
  resourceViews     ResourceView[]
  createdResources  Resource[]

  @@index([createdAt])
  @@index([role])
}

model Activity {
  id              String             @id @default(cuid())
  name            String
  description     String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  ageRange        AgeRange
  createdById     String
  difficulty      ActivityDifficulty
  isPublic        Boolean            @default(true)
  type            ActivityType
  phoneme         String             @default("")
  createdBy       User               @relation(fields: [createdById], references: [id])
  files           ActivityFile[]
  downloadHistory DownloadHistory[]
  categories      ActivityCategory[] @relation("ActivityToActivityCategory")

  @@index([isPublic, createdAt])
  @@index([type, difficulty])
  @@index([ageRange])
  @@index([createdById])
  @@index([name])
}

model ActivityFile {
  id           String   @id @default(cuid())
  activityId   String
  name         String
  s3Key        String
  s3Url        String
  fileType     String
  sizeInBytes  Int
  uploadedById String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  activity     Activity @relation(fields: [activityId], references: [id])

  @@index([activityId])
  @@index([fileType])
  @@index([uploadedById])
}

model ActivityCategory {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  activities  Activity[] @relation("ActivityToActivityCategory")
}

model Subscription {
  id                 String    @id @default(cuid())
  userId             String    @unique
  tier               TierType  @default(FREE)
  status             SubStatus @default(INACTIVE)
  currentPeriodStart DateTime  @default(now())
  currentPeriodEnd   DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  paymentId          String?
  user               User      @relation(fields: [userId], references: [id])

  @@index([status, currentPeriodEnd])
  @@index([tier])
  @@index([createdAt])
}

model DownloadHistory {
  id           String   @id @default(cuid())
  userId       String
  activityId   String
  fileName     String
  fileSize     Int?
  downloadedAt DateTime @default(now())
  ipAddress    String?
  userAgent    String?
  activity     Activity @relation(fields: [activityId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId, downloadedAt])
  @@index([activityId])
  @@map("download_history")
}

model Download {
  id           String   @id @default(cuid())
  userId       String
  exerciseId   String
  downloadedAt DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId, downloadedAt])
  @@index([exerciseId])
  @@map("downloads")
}

model DownloadLimit {
  id        String   @id @default(cuid())
  userId    String   @unique
  downloads Int      @default(0)
  resetDate DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("download_limits")
}

model ConsentRecord {
  id              String            @id @default(cuid())
  userId          String
  consentType     ConsentType
  purpose         String
  legalBasis      LegalBasis
  granted         Boolean
  grantedAt       DateTime?
  withdrawnAt     DateTime?
  expiresAt       DateTime?
  ipAddress       String?
  userAgent       String?
  consentMethod   ConsentMethod     @default(EXPLICIT)
  dataCategories  String[]
  thirdParties    String[]
  retentionPeriod Int?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  auditLogs       ConsentAuditLog[]
  user            User              @relation(fields: [userId], references: [id])

  @@index([grantedAt])
  @@index([expiresAt])
  @@index([userId, consentType])
  @@map("consent_records")
}

model ConsentAuditLog {
  id              String        @id @default(cuid())
  consentRecordId String
  action          ConsentAction
  previousValue   Json?
  newValue        Json?
  reason          String?
  performedBy     String?
  ipAddress       String?
  userAgent       String?
  createdAt       DateTime      @default(now())
  consentRecord   ConsentRecord @relation(fields: [consentRecordId], references: [id])

  @@index([consentRecordId])
  @@index([createdAt])
  @@map("consent_audit_logs")
}

model DataRetentionPolicy {
  id              String     @id @default(cuid())
  dataCategory    String     @unique
  purpose         String
  retentionPeriod Int
  legalBasis      LegalBasis
  isActive        Boolean    @default(true)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@map("data_retention_policies")
}

model DataRetentionLog {
  id                String          @id @default(cuid())
  userId            String
  dataCategory      String
  action            RetentionAction
  recordsAffected   Int
  retentionPolicyId String?
  processedAt       DateTime        @default(now())

  @@index([userId, dataCategory])
  @@index([processedAt])
  @@map("data_retention_logs")
}

model BlogPost {
  id        String     @id @default(cuid())
  slug      String     @unique
  title     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  viewCount Int        @default(0)
  likeCount Int        @default(0)
  likes     BlogLike[]
  views     BlogView[]

  @@map("blog_posts")
}

model BlogView {
  id        String   @id @default(cuid())
  postId    String
  ipAddress String?
  userAgent String?
  referer   String?
  viewedAt  DateTime @default(now())
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([viewedAt])
  @@map("blog_views")
}

model BlogLike {
  id        String   @id @default(cuid())
  postId    String
  ipAddress String?
  userAgent String?
  likedAt   DateTime @default(now())
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, ipAddress])
  @@index([postId])
  @@index([likedAt])
  @@map("blog_likes")
}

model Resource {
  id                 String               @id @default(cuid())
  title              String
  slug               String?              @unique
  description        String
  content            String?              @default("")
  type               ResourceType
  category           String
  ageGroup           String
  duration           String?
  fileSize           String?
  downloadCount      Int                  @default(0)
  viewCount          Int                  @default(0)
  rating             Float                @default(0.0)
  tags               String[]
  downloadUrl        String
  viewUrl            String
  thumbnailUrl       String?
  isFree             Boolean              @default(true)
  isPublished        Boolean              @default(true)
  isFeatured         Boolean              @default(false)
  createdById        String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ResourceToCategory ResourceToCategory[]
  downloads          ResourceDownload[]
  files              ResourceFile[]
  ratings            ResourceRating[]
  views              ResourceView[]
  createdBy          User?                @relation(fields: [createdById], references: [id])

  @@index([isPublished, createdAt])
  @@index([type, category])
  @@index([isFree, isFeatured])
  @@index([createdById])
  @@index([title])
  @@map("resources")
}

model ResourceFile {
  id           String   @id @default(cuid())
  resourceId   String
  name         String
  s3Key        String
  s3Url        String
  fileType     String
  sizeInBytes  Int
  uploadedById String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  resource     Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@index([resourceId])
  @@index([fileType])
  @@index([uploadedById])
  @@map("resource_files")
}

model ResourceCategory {
  id                 String               @id @default(cuid())
  name               String               @unique
  description        String?
  color              String?
  icon               String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ResourceToCategory ResourceToCategory[]

  @@map("resource_categories")
}

model ResourceDownload {
  id           String   @id @default(cuid())
  resourceId   String
  userId       String?
  ipAddress    String?
  userAgent    String?
  downloadedAt DateTime @default(now())
  resource     Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  user         User?    @relation(fields: [userId], references: [id])

  @@index([resourceId])
  @@index([userId, downloadedAt])
  @@index([downloadedAt])
  @@map("resource_downloads")
}

model ResourceView {
  id         String   @id @default(cuid())
  resourceId String
  userId     String?
  ipAddress  String?
  userAgent  String?
  viewedAt   DateTime @default(now())
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id])

  @@index([resourceId])
  @@index([userId, viewedAt])
  @@index([viewedAt])
  @@map("resource_views")
}

model ResourceRating {
  id         String   @id @default(cuid())
  resourceId String
  userId     String?
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id])

  @@unique([resourceId, userId])
  @@index([resourceId])
  @@index([userId])
  @@map("resource_ratings")
}

model ResourceToCategory {
  A                   String
  B                   String
  resources           Resource         @relation(fields: [A], references: [id], onDelete: Cascade)
  resource_categories ResourceCategory @relation(fields: [B], references: [id], onDelete: Cascade)

  @@id([A, B], map: "_ResourceToCategory_AB_pkey")
  @@index([B], map: "_ResourceToCategory_B_index")
  @@map("_ResourceToCategory")
}

enum UserRole {
  ADMIN
  USER
}

enum ActivityType {
  ANIMALS
  COLOURS
  MEANS_OF_TRANSPORT
  CLOTHING
  LANGUAGE
  PROFESSIONS
  GEOMETRIC_SHAPES
  NUMBERS_AND_LETTERS
  MOTOR_SKILLS
  HUMAN_BODY
  OTHER
  SPEECH
  COGNITIVE
  MOTOR
  SOCIAL
}

enum ActivityDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum AgeRange {
  TODDLER
  PRESCHOOL
  CHILD
  TEENAGER
  ADULT
}

enum TierType {
  FREE
  PRO
}

enum SubStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
}

enum ConsentType {
  DATA_PROCESSING
  MARKETING_COMMUNICATIONS
  ANALYTICS_TRACKING
  THIRD_PARTY_SHARING
  COOKIES_ESSENTIAL
  COOKIES_ANALYTICS
  COOKIES_FUNCTIONAL
  COOKIES_MARKETING
  DATA_EXPORT
  DATA_DELETION
  PROFILING
  AUTOMATED_DECISION_MAKING
}

enum LegalBasis {
  CONSENT
  CONTRACT
  LEGAL_OBLIGATION
  VITAL_INTERESTS
  PUBLIC_TASK
  LEGITIMATE_INTERESTS
}

enum ConsentMethod {
  EXPLICIT
  IMPLICIT
  OPT_IN
  OPT_OUT
  GRANULAR
  BUNDLED
}

enum ConsentAction {
  GRANTED
  WITHDRAWN
  UPDATED
  EXPIRED
  RENEWED
  REVOKED
}

enum RetentionAction {
  RETAIN
  DELETE
  ANONYMIZE
  ARCHIVE
  NOTIFY_EXPIRY
}

enum ResourceType {
  PDF
  VIDEO
  AUDIO
  GUIDE
  DOCUMENT
  PRESENTATION
  WORKSHEET
  IMAGE
  INTERACTIVE
}
