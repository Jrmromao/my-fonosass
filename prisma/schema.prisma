generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  firstName     String
  lastName      String
  role          Role           @relation(fields: [roleId], references: [id])
  roleId        String
  practice      Practice?      @relation(fields: [practiceId], references: [id])
  practiceId    String?
  patients      Patient[]
  assessments   Assessment[]
  createdForms  Form[]         @relation("FormCreator")
  formResponses FormResponse[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([email])
  @@index([practiceId])
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Practice {
  id         String     @id @default(cuid())
  name       String     @unique
  plan       Plan       @relation(fields: [planId], references: [id])
  planId     String
  users      User[]
  patients   Patient[]
  activities Activity[]
  forms      Form[] // Practice-specific forms
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([planId])
}

model Plan {
  id        String     @id @default(cuid())
  name      String     @unique
  price     Float
  features  String[]
  practices Practice[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Patient {
  id            String         @id @default(cuid())
  firstName     String
  lastName      String
  dateOfBirth   DateTime
  practice      Practice       @relation(fields: [practiceId], references: [id])
  practiceId    String
  doctor        User           @relation(fields: [doctorId], references: [id])
  doctorId      String
  activities    Activity[]
  assessments   Assessment[]
  medicalNotes  String?        @db.Text
  formResponses FormResponse[] // Patient's form responses
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([practiceId])
  @@index([doctorId])
}

model Activity {
  id          String       @id @default(cuid())
  name        String
  description String       @db.Text
  maxScore    Int
  practice    Practice     @relation(fields: [practiceId], references: [id])
  practiceId  String
  patients    Patient[]
  assessments Assessment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([practiceId])
}

model Assessment {
  id         String   @id @default(cuid())
  patient    Patient  @relation(fields: [patientId], references: [id])
  patientId  String
  activity   Activity @relation(fields: [activityId], references: [id])
  activityId String
  assessedBy User     @relation(fields: [userId], references: [id])
  userId     String
  score      Int
  notes      String?  @db.Text
  date       DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([patientId])
  @@index([activityId])
  @@index([userId])
}

// Form-related models
model Form {
  id          String         @id @default(cuid())
  title       String
  description String?
  practice    Practice       @relation(fields: [practiceId], references: [id])
  practiceId  String
  createdBy   User           @relation("FormCreator", fields: [createdById], references: [id])
  createdById String
  fields      FormField[]
  responses   FormResponse[]
  isTemplate  Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([practiceId])
  @@index([createdById])
}

model FormField {
  id          String              @id @default(cuid())
  formId      String
  name        String
  label       String
  type        String // text, number, email, textarea, select, checkbox
  required    Boolean             @default(false)
  placeholder String?
  description String?
  options     Json? // For select fields: [{ label: string, value: string }]
  validation  Json? // { min, max, minLength, maxLength, pattern, customError }
  order       Int
  form        Form                @relation(fields: [formId], references: [id], onDelete: Cascade)
  responses   FormFieldResponse[]

  @@unique([formId, name])
  @@index([formId])
}

model FormResponse {
  id        String              @id @default(cuid())
  formId    String
  form      Form                @relation(fields: [formId], references: [id], onDelete: Cascade)
  patientId String
  patient   Patient             @relation(fields: [patientId], references: [id])
  userId    String
  user      User                @relation(fields: [userId], references: [id])
  fields    FormFieldResponse[]
  createdAt DateTime            @default(now())

  @@index([formId])
  @@index([patientId])
  @@index([userId])
}

model FormFieldResponse {
  id         String       @id @default(cuid())
  responseId String
  fieldId    String
  value      String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@index([responseId])
  @@index([fieldId])
}
